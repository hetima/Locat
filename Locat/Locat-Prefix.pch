//
//  Prefix header
//
//  The contents of this file are implicitly included at the beginning of every source file.
//

#ifdef __OBJC__


#ifdef DEBUG
#define LOG(...) NSLog(__VA_ARGS__)
#else
#define LOG(...) 
#endif


#define LPELocatedNote @"com.hetima.Locat.LPELocated"
#define LPEOpenSavePanelAppearNote @"com.hetima.Locat.LPEOpenSavePanelAppear"
#define LPEOpenSavePanelDisappearNote @"com.hetima.Locat.LPEOpenSavePanelDisappear"


#import <objc/message.h>

// v3
enum {
    KZRMethodSwizzlingNoError=0,
    KZRMethodSwizzlingErrorClassNotFound=1,
    KZRMethodSwizzlingErrorMethodNotFound=2,
    
    KZRMethodSwizzlingErrorFailedToAddMethod=3
};

#define KZRMETHOD_SWIZZLING_(className, selectorName, returnType, originalIMP, originalSelector) ({\
NSInteger _val_err=KZRMethodSwizzlingNoError; \
BOOL _val_isClassMethod=NO; \
const char* _val_selName=selectorName; \
if(*_val_selName=='+'){_val_isClassMethod=YES; _val_selName++;} \
Class _val_cls=objc_getClass(className); \
if (_val_cls){ \
SEL originalSelector=sel_registerName(_val_selName); \
Method _val_originalMethod; \
if (_val_isClassMethod)_val_originalMethod = class_getClassMethod(_val_cls, originalSelector); \
else _val_originalMethod = class_getInstanceMethod(_val_cls, originalSelector); \
returnType(*originalIMP)(id, SEL, ...) = (returnType(*)(id, SEL, ...))method_getImplementation(_val_originalMethod); \
if (originalIMP) { id _val_block=

#define _WITHBLOCK ;IMP _val_newImp = imp_implementationWithBlock(_val_block); \
method_setImplementation(_val_originalMethod, _val_newImp); \
}else{_val_err=KZRMethodSwizzlingErrorMethodNotFound;} \
}else{_val_err=KZRMethodSwizzlingErrorClassNotFound;} \
_val_err; \
})

// adding
#define KZRMETHOD_ADDING_(className, superClassName, selectorName, returnType, superIMP, originalSelector) ({\
NSInteger _val_adding_err=KZRMethodSwizzlingNoError; \
BOOL _val_isClassMethod=NO; \
const char* _val_selName=selectorName; \
if(*_val_selName=='+'){_val_isClassMethod=YES; _val_selName++;} \
Class _val_target_cls=objc_getClass(className); \
Class _val_cls=objc_getClass(superClassName); \
if (_val_cls && _val_target_cls){ \
SEL originalSelector=sel_registerName(_val_selName); \
SEL _val_selector=originalSelector; \
Method _val_originalMethod; \
if (_val_isClassMethod)_val_originalMethod = class_getClassMethod(_val_cls, originalSelector); \
else _val_originalMethod = class_getInstanceMethod(_val_cls, originalSelector); \
returnType(*superIMP)(id, SEL, ...) = (returnType(*)(id, SEL, ...))method_getImplementation(_val_originalMethod); \
if (superIMP) { id _val_block=

#define _WITHBLOCK_ADD ;IMP _val_newImp = imp_implementationWithBlock(_val_block); \
if(!class_addMethod(_val_target_cls, _val_selector, _val_newImp, method_getTypeEncoding(_val_originalMethod))){ \
_val_adding_err=KZRMethodSwizzlingErrorFailedToAddMethod;} \
}else{_val_adding_err=KZRMethodSwizzlingErrorMethodNotFound;} \
}else{_val_adding_err=KZRMethodSwizzlingErrorClassNotFound;} \
_val_adding_err; \
})




#endif
